
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN CASE CHAR COLON COMMA CONST DIV DO DOT DOTDOT DOWNTO ELSE END EQUAL FOR FUNCTION GE GOTO GT IF IN INTEGER LB LE LP LT MINUS MOD MUL NAME NOT OF OR PACKED PLUS PROCEDURE PROGRAM RB READ REAL RECORD REPEAT RP SEMI SET STRING SYS_CON SYS_FUNCT SYS_PROC SYS_TYPE THEN TO TYPE UNEQUAL UNTIL VAR WHILE WITHprogram : program_head routine DOTprogram_head : PROGRAM NAME SEMIroutine : routine_head routine_bodysub_routine : routine_head routine_bodyroutine_head : label_part const_part type_part var_part routine_partlabel_part : epsilonconst_part : CONST const_expr_listconst_part : epsilonconst_expr_list : const_expr_list NAME EQUAL const_value SEMIconst_expr_list : NAME EQUAL const_value SEMIconst_value : INTEGERconst_value : REALconst_value : CHARconst_value : STRINGconst_value : SYS_CONtype_part : TYPE type_decl_listtype_part : epsilontype_decl_list : type_decl_list type_definitiontype_decl_list : type_definitiontype_definition : NAME EQUAL type_decl SEMItype_decl : simple_type_decltype_decl : array_type_decltype_decl : record_type_declsimple_type_decl : SYS_TYPEsimple_type_decl : NAMEsimple_type_decl : LP name_list RPsimple_type_decl : const_value DOTDOT const_valuesimple_type_decl : MINUS const_value DOTDOT const_valuesimple_type_decl : MINUS const_value DOTDOT MINUS const_valuesimple_type_decl : NAME  DOTDOT  NAMEarray_type_decl : ARRAY LB simple_type_decl RB OF type_declrecord_type_decl : RECORD field_decl_list ENDfield_decl_list : field_decl_list field_declfield_decl_list : field_declfield_decl : name_list COLON type_decl SEMIname_list : name_list COMMA NAMEname_list : NAMEvar_part : VAR var_decl_listvar_part : epsilonvar_decl_list : var_decl_list var_declvar_decl_list : var_declvar_decl : name_list COLON type_decl SEMIroutine_part : routine_part function_declroutine_part : routine_part procedure_declroutine_part : function_declroutine_part : procedure_declroutine_part : epsilonfunction_decl : function_head SEMI sub_routine SEMIfunction_head : FUNCTION NAME parameters COLON simple_type_declprocedure_decl : procedure_head SEMI sub_routine SEMIprocedure_head : PROCEDURE NAME parametersparameters : LP para_decl_list RPparameters : epsilonpara_decl_list : para_decl_list SEMI para_type_listpara_decl_list : para_type_listpara_type_list : var_para_list COLON simple_type_declpara_type_list : val_para_list COLON simple_type_declvar_para_list : VAR name_listval_para_list : name_listroutine_body : compound_stmtcompound_stmt : BEGIN stmt_list ENDstmt_list : stmt_list stmt SEMIstmt_list : epsilonstmt : INTEGER COLON non_label_stmtstmt : non_label_stmtnon_label_stmt : assign_stmtnon_label_stmt : proc_stmtnon_label_stmt : compound_stmtnon_label_stmt : if_stmtnon_label_stmt : repeat_stmtnon_label_stmt : while_stmtnon_label_stmt : for_stmtnon_label_stmt : case_stmtnon_label_stmt : goto_stmtassign_stmt : NAME ASSIGN expressionassign_stmt : NAME LB expression RB ASSIGN expressionassign_stmt : NAME DOT NAME ASSIGN expressionproc_stmt : NAMEproc_stmt : NAME LP args_list RPproc_stmt : SYS_PROCproc_stmt : SYS_PROC LP expression_list RPproc_stmt : READ LP factor RPif_stmt : IF expression THEN stmt else_clauseelse_clause : ELSE stmtelse_clause : epsilonrepeat_stmt : REPEAT stmt_list UNTIL expressionwhile_stmt : WHILE expression DO stmtfor_stmt : FOR NAME ASSIGN expression direction expression DO stmtdirection : TOdirection : DOWNTOcase_stmt : CASE expression OF case_expr_list ENDcase_expr_list : case_expr_list case_exprcase_expr_list : case_exprcase_expr : const_value COLON stmt SEMIcase_expr : NAME COLON stmt SEMIgoto_stmt : GOTO INTEGERexpression_list : expression_list COMMA expressionexpression_list : expressionexpression : expression GE exprexpression : expression GT exprexpression : expression LE exprexpression : expression LT exprexpression : expression EQUAL exprexpression : expression UNEQUAL exprexpression : exprexpr : expr PLUS termexpr : expr MINUS termexpr : expr OR termexpr : termterm : term MUL factorterm : term DIV factor term : term MOD factorterm : term AND factorterm : factorfactor : NAMEfactor : NAME LP args_list RPfactor : SYS_FUNCTfactor : SYS_FUNCT  LP  args_list RPfactor : const_valuefactor : LP expression RPfactor : NOT factorfactor : MINUS factorfactor : NAME LB expression RBfactor : NAME DOT NAME args_list : args_list COMMA expressionargs_list : expressionepsilon : '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,9,],[0,-1,]),'CONST':([2,6,7,16,134,135,],[-127,14,-6,-2,-127,-127,]),'TYPE':([2,6,7,13,15,16,22,134,135,153,205,],[-127,-127,-6,20,-8,-2,-7,-127,-127,-10,-9,]),'VAR':([2,6,7,13,15,16,19,21,22,49,50,94,134,135,153,191,197,205,249,],[-127,-127,-6,-127,-8,-2,47,-17,-7,-16,-19,-18,-127,-127,-10,231,-20,-9,231,]),'FUNCTION':([2,6,7,13,15,16,19,21,22,46,48,49,50,82,83,84,85,90,91,94,132,133,134,135,138,153,197,205,223,225,233,],[-127,-127,-6,-127,-8,-2,-127,-17,-7,88,-39,-16,-19,88,-45,-46,-47,-38,-41,-18,-43,-44,-127,-127,-40,-10,-20,-9,-48,-50,-42,]),'PROCEDURE':([2,6,7,13,15,16,19,21,22,46,48,49,50,82,83,84,85,90,91,94,132,133,134,135,138,153,197,205,223,225,233,],[-127,-127,-6,-127,-8,-2,-127,-17,-7,89,-39,-16,-19,89,-45,-46,-47,-38,-41,-18,-43,-44,-127,-127,-40,-10,-20,-9,-48,-50,-42,]),'BEGIN':([2,5,6,7,12,13,15,16,17,18,19,21,22,41,46,48,49,50,54,55,77,82,83,84,85,90,91,94,107,129,132,133,134,135,138,153,188,197,205,211,221,222,223,225,233,257,],[-127,12,-127,-6,-127,-127,-8,-2,12,-63,-127,-17,-7,-127,-127,-39,-16,-19,-62,12,12,-5,-45,-46,-47,-38,-41,-18,12,12,-43,-44,-127,-127,-40,-10,12,-20,-9,12,12,12,-48,-50,-42,12,]),'NAME':([3,12,14,17,18,20,22,40,41,42,43,44,47,49,50,54,55,56,57,58,59,60,61,65,68,71,77,88,89,90,91,94,95,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,126,128,129,130,131,138,139,140,147,151,153,155,157,159,183,184,191,196,197,201,202,203,205,206,211,216,217,218,220,221,222,226,231,233,240,241,249,250,251,257,258,259,264,265,],[8,-127,23,37,-63,51,52,67,-127,67,79,67,93,51,-19,-62,37,67,67,101,67,67,67,67,67,67,37,136,137,93,-41,-18,141,37,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,177,67,67,37,67,186,-40,141,195,93,93,-10,67,67,67,186,-93,93,234,-20,141,93,-34,-9,67,37,67,-89,-90,-92,37,37,141,93,-42,-33,141,93,141,141,37,-94,-95,141,-35,]),'DOT':([4,10,11,24,37,67,],[9,-3,-60,-61,58,124,]),'SEMI':([8,11,24,25,27,28,29,30,31,32,33,34,35,36,37,38,63,64,66,67,69,70,72,73,74,75,76,81,86,87,97,98,99,121,127,137,141,142,143,144,145,146,152,156,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,180,181,187,189,192,193,194,207,210,212,213,214,215,219,224,227,228,234,235,236,239,242,243,245,246,247,248,254,256,260,261,262,263,266,267,],[16,-60,-61,54,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-78,-80,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-96,134,135,153,-64,-75,-122,-121,-127,-25,197,-21,-22,-23,-24,205,-79,-81,-82,-127,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,-86,-87,223,225,-53,-51,233,-77,-83,-85,-116,-123,-118,-91,-4,249,-55,-30,-26,-27,-32,-76,-84,258,259,-49,-52,-28,265,-54,-56,-57,-29,-88,-31,]),'END':([12,17,18,54,183,184,202,203,220,240,258,259,265,],[-127,24,-63,-62,219,-93,239,-34,-92,-33,-94,-95,-35,]),'INTEGER':([12,17,18,40,41,42,44,45,53,54,56,57,59,60,61,65,68,71,77,95,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,129,130,131,139,149,155,157,159,183,184,199,201,206,211,216,217,218,220,221,222,226,237,241,250,251,253,257,258,259,264,],[-127,26,-63,72,-127,72,72,81,72,-62,72,72,72,72,72,72,72,72,26,72,72,26,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,26,72,72,72,72,72,72,72,72,-93,72,72,72,26,72,-89,-90,-92,26,26,72,72,72,72,72,72,26,-94,-95,72,]),'SYS_PROC':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,38,-63,-127,-62,38,38,38,38,38,38,38,38,]),'READ':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,39,-63,-127,-62,39,39,39,39,39,39,39,39,]),'IF':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,40,-63,-127,-62,40,40,40,40,40,40,40,40,]),'REPEAT':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,41,-63,-127,-62,41,41,41,41,41,41,41,41,]),'WHILE':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,42,-63,-127,-62,42,42,42,42,42,42,42,42,]),'FOR':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,43,-63,-127,-62,43,43,43,43,43,43,43,43,]),'CASE':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,44,-63,-127,-62,44,44,44,44,44,44,44,44,]),'GOTO':([12,17,18,41,54,55,77,107,129,211,221,222,257,],[-127,45,-63,-127,-62,45,45,45,45,45,45,45,45,]),'UNTIL':([18,41,54,77,],[-63,-127,-62,128,]),'EQUAL':([23,51,52,62,63,64,66,67,69,70,72,73,74,75,76,78,80,99,100,103,105,121,125,127,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,182,207,208,209,213,214,215,242,244,],[53,95,96,112,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,112,112,112,112,112,112,-122,112,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,112,-124,-120,112,112,112,112,112,-116,-123,-118,112,112,]),'ELSE':([24,27,28,29,30,31,32,33,34,35,36,37,38,63,64,66,67,69,70,72,73,74,75,76,81,98,99,121,127,156,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,180,181,207,210,212,213,214,215,219,242,243,266,],[-61,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-78,-80,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-96,-64,-75,-122,-121,-79,-81,-82,211,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,-86,-87,-77,-83,-85,-116,-123,-118,-91,-76,-84,-88,]),'COLON':([26,72,73,74,75,76,92,93,136,185,186,190,192,195,204,229,230,232,248,252,],[55,-11,-12,-13,-14,-15,139,-37,-127,221,222,226,-53,-36,241,250,251,-59,-52,-58,]),'ASSIGN':([37,79,101,154,],[56,130,155,206,]),'LB':([37,67,150,],[57,123,201,]),'LP':([37,38,39,40,42,44,56,57,59,60,61,65,67,68,69,71,95,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,136,137,139,155,157,159,201,206,216,217,218,226,241,250,251,264,],[59,60,61,68,68,68,68,68,68,68,68,68,122,68,126,68,147,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,191,191,147,68,68,68,147,68,68,-89,-90,147,147,147,147,147,]),'SYS_FUNCT':([40,42,44,56,57,59,60,61,65,68,71,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,155,157,159,206,216,217,218,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-89,-90,]),'NOT':([40,42,44,56,57,59,60,61,65,68,71,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,155,157,159,206,216,217,218,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-89,-90,]),'MINUS':([40,42,44,56,57,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,95,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,128,130,139,155,157,159,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,201,206,213,214,215,216,217,218,226,237,241,250,251,264,],[65,65,65,65,65,65,65,65,115,-109,65,-114,-115,65,-117,-119,65,-11,-12,-13,-14,-15,149,65,65,65,65,65,65,65,65,65,65,65,65,65,-122,65,65,65,-121,65,65,149,65,65,65,115,115,115,115,115,115,-106,-107,-108,-110,-111,-112,-113,-124,-120,149,65,-116,-123,-118,65,-89,-90,149,253,149,149,149,149,]),'REAL':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,131,139,149,155,157,159,183,184,199,201,206,216,217,218,220,226,237,241,250,251,253,258,259,264,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-93,73,73,73,73,-89,-90,-92,73,73,73,73,73,73,-94,-95,73,]),'CHAR':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,131,139,149,155,157,159,183,184,199,201,206,216,217,218,220,226,237,241,250,251,253,258,259,264,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-93,74,74,74,74,-89,-90,-92,74,74,74,74,74,74,-94,-95,74,]),'STRING':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,131,139,149,155,157,159,183,184,199,201,206,216,217,218,220,226,237,241,250,251,253,258,259,264,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-93,75,75,75,75,-89,-90,-92,75,75,75,75,75,75,-94,-95,75,]),'SYS_CON':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,131,139,149,155,157,159,183,184,199,201,206,216,217,218,220,226,237,241,250,251,253,258,259,264,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-93,76,76,76,76,-89,-90,-92,76,76,76,76,76,76,-94,-95,76,]),'THEN':([62,63,64,66,67,69,70,72,73,74,75,76,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,213,214,215,],[107,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'GE':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,99,100,103,105,121,125,127,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,182,207,208,209,213,214,215,242,244,],[108,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,108,108,108,108,108,108,-122,108,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,108,-124,-120,108,108,108,108,108,-116,-123,-118,108,108,]),'GT':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,99,100,103,105,121,125,127,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,182,207,208,209,213,214,215,242,244,],[109,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,109,109,109,109,109,109,-122,109,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,109,-124,-120,109,109,109,109,109,-116,-123,-118,109,109,]),'LE':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,99,100,103,105,121,125,127,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,182,207,208,209,213,214,215,242,244,],[110,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,110,110,110,110,110,110,-122,110,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,110,-124,-120,110,110,110,110,110,-116,-123,-118,110,110,]),'LT':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,99,100,103,105,121,125,127,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,182,207,208,209,213,214,215,242,244,],[111,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,111,111,111,111,111,111,-122,111,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,111,-124,-120,111,111,111,111,111,-116,-123,-118,111,111,]),'UNEQUAL':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,99,100,103,105,121,125,127,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,182,207,208,209,213,214,215,242,244,],[113,-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,113,113,113,113,113,113,-122,113,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,113,-124,-120,113,113,113,113,113,-116,-123,-118,113,113,]),'DO':([63,64,66,67,69,70,72,73,74,75,76,78,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,213,214,215,244,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,129,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,-116,-123,-118,257,]),'OF':([63,64,66,67,69,70,72,73,74,75,76,80,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,213,214,215,255,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,131,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,-116,-123,-118,264,]),'RB':([63,64,66,67,69,70,72,73,74,75,76,100,121,127,141,146,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,213,214,215,234,235,236,238,254,263,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,154,-122,-121,-25,-24,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,214,-124,-120,-116,-123,-118,-30,-26,-27,255,-28,-29,]),'RP':([63,64,66,67,69,70,72,73,74,75,76,93,102,103,104,105,106,121,125,127,141,146,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,178,179,195,198,208,209,213,214,215,227,228,234,235,236,254,260,261,262,263,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-37,156,-126,158,-98,160,-122,178,-121,-25,-24,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,213,-124,-120,215,-36,235,-125,-97,-116,-123,-118,248,-55,-30,-26,-27,-28,-54,-56,-57,-29,]),'COMMA':([63,64,66,67,69,70,72,73,74,75,76,92,93,102,103,104,105,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,178,179,195,198,204,208,209,213,214,215,232,252,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,140,-37,157,-126,159,-98,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,157,-124,-120,157,-36,140,140,-125,-97,-116,-123,-118,140,140,]),'TO':([63,64,66,67,69,70,72,73,74,75,76,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,182,213,214,215,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,217,-116,-123,-118,]),'DOWNTO':([63,64,66,67,69,70,72,73,74,75,76,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,182,213,214,215,],[-105,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-124,-120,218,-116,-123,-118,]),'PLUS':([63,64,66,67,69,70,72,73,74,75,76,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,213,214,215,],[114,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,114,114,114,114,114,114,-106,-107,-108,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'OR':([63,64,66,67,69,70,72,73,74,75,76,121,127,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,213,214,215,],[116,-109,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,116,116,116,116,116,116,-106,-107,-108,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'MUL':([64,66,67,69,70,72,73,74,75,76,121,127,168,169,170,171,172,173,174,177,178,213,214,215,],[117,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,117,117,117,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'DIV':([64,66,67,69,70,72,73,74,75,76,121,127,168,169,170,171,172,173,174,177,178,213,214,215,],[118,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,118,118,118,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'MOD':([64,66,67,69,70,72,73,74,75,76,121,127,168,169,170,171,172,173,174,177,178,213,214,215,],[119,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,119,119,119,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'AND':([64,66,67,69,70,72,73,74,75,76,121,127,168,169,170,171,172,173,174,177,178,213,214,215,],[120,-114,-115,-117,-119,-11,-12,-13,-14,-15,-122,-121,120,120,120,-110,-111,-112,-113,-124,-120,-116,-123,-118,]),'DOTDOT':([72,73,74,75,76,141,148,200,],[-11,-12,-13,-14,-15,196,199,237,]),'SYS_TYPE':([95,139,201,226,241,250,251,264,],[146,146,146,146,146,146,146,146,]),'ARRAY':([95,139,241,264,],[150,150,150,150,]),'RECORD':([95,139,241,264,],[151,151,151,151,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_head':([0,],[2,]),'routine':([2,],[4,]),'routine_head':([2,134,135,],[5,188,188,]),'label_part':([2,134,135,],[6,6,6,]),'epsilon':([2,6,12,13,19,41,46,134,135,136,137,161,],[7,15,18,21,48,18,85,7,7,192,192,212,]),'routine_body':([5,188,],[10,224,]),'compound_stmt':([5,17,55,77,107,129,188,211,221,222,257,],[11,30,30,30,30,30,11,30,30,30,30,]),'const_part':([6,],[13,]),'stmt_list':([12,41,],[17,77,]),'type_part':([13,],[19,]),'const_expr_list':([14,],[22,]),'stmt':([17,77,107,129,211,221,222,257,],[25,25,161,181,243,245,246,266,]),'non_label_stmt':([17,55,77,107,129,211,221,222,257,],[27,98,27,27,27,27,27,27,27,]),'assign_stmt':([17,55,77,107,129,211,221,222,257,],[28,28,28,28,28,28,28,28,28,]),'proc_stmt':([17,55,77,107,129,211,221,222,257,],[29,29,29,29,29,29,29,29,29,]),'if_stmt':([17,55,77,107,129,211,221,222,257,],[31,31,31,31,31,31,31,31,31,]),'repeat_stmt':([17,55,77,107,129,211,221,222,257,],[32,32,32,32,32,32,32,32,32,]),'while_stmt':([17,55,77,107,129,211,221,222,257,],[33,33,33,33,33,33,33,33,33,]),'for_stmt':([17,55,77,107,129,211,221,222,257,],[34,34,34,34,34,34,34,34,34,]),'case_stmt':([17,55,77,107,129,211,221,222,257,],[35,35,35,35,35,35,35,35,35,]),'goto_stmt':([17,55,77,107,129,211,221,222,257,],[36,36,36,36,36,36,36,36,36,]),'var_part':([19,],[46,]),'type_decl_list':([20,],[49,]),'type_definition':([20,49,],[50,94,]),'expression':([40,42,44,56,57,59,60,68,122,123,126,128,130,155,157,159,206,216,],[62,78,80,99,100,103,105,125,103,176,103,180,182,207,208,209,242,244,]),'expr':([40,42,44,56,57,59,60,68,108,109,110,111,112,113,122,123,126,128,130,155,157,159,206,216,],[63,63,63,63,63,63,63,63,162,163,164,165,166,167,63,63,63,63,63,63,63,63,63,63,]),'term':([40,42,44,56,57,59,60,68,108,109,110,111,112,113,114,115,116,122,123,126,128,130,155,157,159,206,216,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,168,169,170,64,64,64,64,64,64,64,64,64,64,]),'factor':([40,42,44,56,57,59,60,61,65,68,71,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,155,157,159,206,216,],[66,66,66,66,66,66,66,106,121,66,127,66,66,66,66,66,66,66,66,66,171,172,173,174,66,66,66,66,66,66,66,66,66,66,]),'const_value':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,126,128,130,131,139,149,155,157,159,183,199,201,206,216,226,237,241,250,251,253,264,],[70,70,70,97,70,70,70,70,70,70,70,70,148,152,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,185,148,200,70,70,70,185,236,148,70,70,148,254,148,148,148,263,148,]),'routine_part':([46,],[82,]),'function_decl':([46,82,],[83,132,]),'procedure_decl':([46,82,],[84,133,]),'function_head':([46,82,],[86,86,]),'procedure_head':([46,82,],[87,87,]),'var_decl_list':([47,],[90,]),'var_decl':([47,90,],[91,138,]),'name_list':([47,90,147,151,191,202,231,249,],[92,92,198,204,232,204,252,232,]),'args_list':([59,122,126,],[102,175,179,]),'expression_list':([60,],[104,]),'type_decl':([95,139,241,264,],[142,194,256,267,]),'simple_type_decl':([95,139,201,226,241,250,251,264,],[143,143,238,247,143,261,262,143,]),'array_type_decl':([95,139,241,264,],[144,144,144,144,]),'record_type_decl':([95,139,241,264,],[145,145,145,145,]),'case_expr_list':([131,],[183,]),'case_expr':([131,183,],[184,220,]),'sub_routine':([134,135,],[187,189,]),'parameters':([136,137,],[190,193,]),'field_decl_list':([151,],[202,]),'field_decl':([151,202,],[203,240,]),'else_clause':([161,],[210,]),'direction':([182,],[216,]),'para_decl_list':([191,],[227,]),'para_type_list':([191,249,],[228,260,]),'var_para_list':([191,249,],[229,229,]),'val_para_list':([191,249,],[230,230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_head routine DOT','program',3,'p_program','parser.py',106),
  ('program_head -> PROGRAM NAME SEMI','program_head',3,'p_program_head','parser.py',111),
  ('routine -> routine_head routine_body','routine',2,'p_routine','parser.py',116),
  ('sub_routine -> routine_head routine_body','sub_routine',2,'p_sub_routine','parser.py',121),
  ('routine_head -> label_part const_part type_part var_part routine_part','routine_head',5,'p_routine_head','parser.py',126),
  ('label_part -> epsilon','label_part',1,'p_label_part','parser.py',131),
  ('const_part -> CONST const_expr_list','const_part',2,'p_const_part','parser.py',136),
  ('const_part -> epsilon','const_part',1,'p_const_part_e','parser.py',141),
  ('const_expr_list -> const_expr_list NAME EQUAL const_value SEMI','const_expr_list',5,'p_const_expr_list_1','parser.py',146),
  ('const_expr_list -> NAME EQUAL const_value SEMI','const_expr_list',4,'p_const_expr_list_2','parser.py',151),
  ('const_value -> INTEGER','const_value',1,'p_const_value_1','parser.py',156),
  ('const_value -> REAL','const_value',1,'p_const_value_2','parser.py',161),
  ('const_value -> CHAR','const_value',1,'p_const_value_3','parser.py',166),
  ('const_value -> STRING','const_value',1,'p_const_value_4','parser.py',171),
  ('const_value -> SYS_CON','const_value',1,'p_const_value_5','parser.py',176),
  ('type_part -> TYPE type_decl_list','type_part',2,'p_type_part','parser.py',181),
  ('type_part -> epsilon','type_part',1,'p_type_part_e','parser.py',186),
  ('type_decl_list -> type_decl_list type_definition','type_decl_list',2,'p_type_decl_list_1','parser.py',191),
  ('type_decl_list -> type_definition','type_decl_list',1,'p_type_decl_list_2','parser.py',196),
  ('type_definition -> NAME EQUAL type_decl SEMI','type_definition',4,'p_type_definition','parser.py',201),
  ('type_decl -> simple_type_decl','type_decl',1,'p_type_decl_1','parser.py',206),
  ('type_decl -> array_type_decl','type_decl',1,'p_type_decl_2','parser.py',211),
  ('type_decl -> record_type_decl','type_decl',1,'p_type_decl_3','parser.py',216),
  ('simple_type_decl -> SYS_TYPE','simple_type_decl',1,'p_simple_type_decl_1','parser.py',221),
  ('simple_type_decl -> NAME','simple_type_decl',1,'p_simple_type_decl_2','parser.py',226),
  ('simple_type_decl -> LP name_list RP','simple_type_decl',3,'p_simple_type_decl_3','parser.py',231),
  ('simple_type_decl -> const_value DOTDOT const_value','simple_type_decl',3,'p_simple_type_decl_4','parser.py',236),
  ('simple_type_decl -> MINUS const_value DOTDOT const_value','simple_type_decl',4,'p_simple_type_decl_5','parser.py',241),
  ('simple_type_decl -> MINUS const_value DOTDOT MINUS const_value','simple_type_decl',5,'p_simple_type_decl_6','parser.py',247),
  ('simple_type_decl -> NAME DOTDOT NAME','simple_type_decl',3,'p_simple_type_decl_7','parser.py',254),
  ('array_type_decl -> ARRAY LB simple_type_decl RB OF type_decl','array_type_decl',6,'p_array_type_decl','parser.py',259),
  ('record_type_decl -> RECORD field_decl_list END','record_type_decl',3,'p_record_type_decl','parser.py',264),
  ('field_decl_list -> field_decl_list field_decl','field_decl_list',2,'p_field_decl_list_1','parser.py',269),
  ('field_decl_list -> field_decl','field_decl_list',1,'p_field_decl_list_2','parser.py',274),
  ('field_decl -> name_list COLON type_decl SEMI','field_decl',4,'p_field_decl','parser.py',279),
  ('name_list -> name_list COMMA NAME','name_list',3,'p_name_list_1','parser.py',284),
  ('name_list -> NAME','name_list',1,'p_name_list_2','parser.py',289),
  ('var_part -> VAR var_decl_list','var_part',2,'p_var_part','parser.py',294),
  ('var_part -> epsilon','var_part',1,'p_var_part_e','parser.py',299),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list_1','parser.py',304),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list_2','parser.py',309),
  ('var_decl -> name_list COLON type_decl SEMI','var_decl',4,'p_var_decl','parser.py',314),
  ('routine_part -> routine_part function_decl','routine_part',2,'p_routine_part_1','parser.py',319),
  ('routine_part -> routine_part procedure_decl','routine_part',2,'p_routine_part_2','parser.py',324),
  ('routine_part -> function_decl','routine_part',1,'p_routine_part_3','parser.py',328),
  ('routine_part -> procedure_decl','routine_part',1,'p_routine_part_4','parser.py',333),
  ('routine_part -> epsilon','routine_part',1,'p_routine_part_5','parser.py',338),
  ('function_decl -> function_head SEMI sub_routine SEMI','function_decl',4,'p_function_decl','parser.py',343),
  ('function_head -> FUNCTION NAME parameters COLON simple_type_decl','function_head',5,'p_function_head','parser.py',348),
  ('procedure_decl -> procedure_head SEMI sub_routine SEMI','procedure_decl',4,'p_procedure_decl','parser.py',353),
  ('procedure_head -> PROCEDURE NAME parameters','procedure_head',3,'p_procedure_head','parser.py',358),
  ('parameters -> LP para_decl_list RP','parameters',3,'p_parameters','parser.py',363),
  ('parameters -> epsilon','parameters',1,'p_parameters_e','parser.py',368),
  ('para_decl_list -> para_decl_list SEMI para_type_list','para_decl_list',3,'p_para_decl_list_1','parser.py',373),
  ('para_decl_list -> para_type_list','para_decl_list',1,'p_para_decl_list_2','parser.py',378),
  ('para_type_list -> var_para_list COLON simple_type_decl','para_type_list',3,'p_para_type_list_1','parser.py',383),
  ('para_type_list -> val_para_list COLON simple_type_decl','para_type_list',3,'p_para_type_list_2','parser.py',388),
  ('var_para_list -> VAR name_list','var_para_list',2,'p_var_para_list','parser.py',393),
  ('val_para_list -> name_list','val_para_list',1,'p_val_para_list','parser.py',398),
  ('routine_body -> compound_stmt','routine_body',1,'p_routine_body','parser.py',403),
  ('compound_stmt -> BEGIN stmt_list END','compound_stmt',3,'p_compound_stmt','parser.py',408),
  ('stmt_list -> stmt_list stmt SEMI','stmt_list',3,'p_stmt_list','parser.py',413),
  ('stmt_list -> epsilon','stmt_list',1,'p_stmt_list_e','parser.py',418),
  ('stmt -> INTEGER COLON non_label_stmt','stmt',3,'p_stmt_1','parser.py',423),
  ('stmt -> non_label_stmt','stmt',1,'p_stmt_2','parser.py',428),
  ('non_label_stmt -> assign_stmt','non_label_stmt',1,'p_non_label_stmt_1','parser.py',433),
  ('non_label_stmt -> proc_stmt','non_label_stmt',1,'p_non_label_stmt_2','parser.py',438),
  ('non_label_stmt -> compound_stmt','non_label_stmt',1,'p_non_label_stmt_3','parser.py',443),
  ('non_label_stmt -> if_stmt','non_label_stmt',1,'p_non_label_stmt_4','parser.py',448),
  ('non_label_stmt -> repeat_stmt','non_label_stmt',1,'p_non_label_stmt_5','parser.py',453),
  ('non_label_stmt -> while_stmt','non_label_stmt',1,'p_non_label_stmt_6','parser.py',458),
  ('non_label_stmt -> for_stmt','non_label_stmt',1,'p_non_label_stmt_7','parser.py',463),
  ('non_label_stmt -> case_stmt','non_label_stmt',1,'p_non_label_stmt_8','parser.py',468),
  ('non_label_stmt -> goto_stmt','non_label_stmt',1,'p_non_label_stmt_9','parser.py',473),
  ('assign_stmt -> NAME ASSIGN expression','assign_stmt',3,'p_assign_stmt_1','parser.py',478),
  ('assign_stmt -> NAME LB expression RB ASSIGN expression','assign_stmt',6,'p_assign_stmt_2','parser.py',483),
  ('assign_stmt -> NAME DOT NAME ASSIGN expression','assign_stmt',5,'p_assign_stmt_3','parser.py',488),
  ('proc_stmt -> NAME','proc_stmt',1,'p_proc_stmt_1','parser.py',493),
  ('proc_stmt -> NAME LP args_list RP','proc_stmt',4,'p_proc_stmt_2','parser.py',498),
  ('proc_stmt -> SYS_PROC','proc_stmt',1,'p_proc_stmt_3','parser.py',503),
  ('proc_stmt -> SYS_PROC LP expression_list RP','proc_stmt',4,'p_proc_stmt_4','parser.py',508),
  ('proc_stmt -> READ LP factor RP','proc_stmt',4,'p_proc_stmt_5','parser.py',513),
  ('if_stmt -> IF expression THEN stmt else_clause','if_stmt',5,'p_if_stmt','parser.py',518),
  ('else_clause -> ELSE stmt','else_clause',2,'p_else_clause','parser.py',523),
  ('else_clause -> epsilon','else_clause',1,'p_else_clause_e','parser.py',528),
  ('repeat_stmt -> REPEAT stmt_list UNTIL expression','repeat_stmt',4,'p_repeat_stmt','parser.py',532),
  ('while_stmt -> WHILE expression DO stmt','while_stmt',4,'p_while_stmt','parser.py',536),
  ('for_stmt -> FOR NAME ASSIGN expression direction expression DO stmt','for_stmt',8,'p_for_stmt','parser.py',540),
  ('direction -> TO','direction',1,'p_direction_1','parser.py',544),
  ('direction -> DOWNTO','direction',1,'p_direction_2','parser.py',547),
  ('case_stmt -> CASE expression OF case_expr_list END','case_stmt',5,'p_case_stmt','parser.py',551),
  ('case_expr_list -> case_expr_list case_expr','case_expr_list',2,'p_case_expr_list_1','parser.py',555),
  ('case_expr_list -> case_expr','case_expr_list',1,'p_case_expr_list_2','parser.py',558),
  ('case_expr -> const_value COLON stmt SEMI','case_expr',4,'p_case_expr_1','parser.py',562),
  ('case_expr -> NAME COLON stmt SEMI','case_expr',4,'p_case_expr_2','parser.py',565),
  ('goto_stmt -> GOTO INTEGER','goto_stmt',2,'p_goto_stmt','parser.py',569),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list_1','parser.py',573),
  ('expression_list -> expression','expression_list',1,'p_expression_list_2','parser.py',576),
  ('expression -> expression GE expr','expression',3,'p_expression_1','parser.py',579),
  ('expression -> expression GT expr','expression',3,'p_expression_2','parser.py',582),
  ('expression -> expression LE expr','expression',3,'p_expression_3','parser.py',585),
  ('expression -> expression LT expr','expression',3,'p_expression_4','parser.py',588),
  ('expression -> expression EQUAL expr','expression',3,'p_expression_5','parser.py',591),
  ('expression -> expression UNEQUAL expr','expression',3,'p_expression_6','parser.py',594),
  ('expression -> expr','expression',1,'p_expression_7','parser.py',597),
  ('expr -> expr PLUS term','expr',3,'p_expr_1','parser.py',601),
  ('expr -> expr MINUS term','expr',3,'p_expr_2','parser.py',604),
  ('expr -> expr OR term','expr',3,'p_expr_3','parser.py',607),
  ('expr -> term','expr',1,'p_expr_4','parser.py',610),
  ('term -> term MUL factor','term',3,'p_term_1','parser.py',615),
  ('term -> term DIV factor','term',3,'p_term_2','parser.py',618),
  ('term -> term MOD factor','term',3,'p_term_3','parser.py',621),
  ('term -> term AND factor','term',3,'p_term_4','parser.py',624),
  ('term -> factor','term',1,'p_term_5','parser.py',627),
  ('factor -> NAME','factor',1,'p_factor_1','parser.py',633),
  ('factor -> NAME LP args_list RP','factor',4,'p_factor_2','parser.py',636),
  ('factor -> SYS_FUNCT','factor',1,'p_factor_3','parser.py',639),
  ('factor -> SYS_FUNCT LP args_list RP','factor',4,'p_factor_4','parser.py',642),
  ('factor -> const_value','factor',1,'p_factor_5','parser.py',645),
  ('factor -> LP expression RP','factor',3,'p_factor_6','parser.py',648),
  ('factor -> NOT factor','factor',2,'p_factor_7','parser.py',651),
  ('factor -> MINUS factor','factor',2,'p_factor_8','parser.py',654),
  ('factor -> NAME LB expression RB','factor',4,'p_factor_9','parser.py',657),
  ('factor -> NAME DOT NAME','factor',3,'p_factor_10','parser.py',660),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','parser.py',665),
  ('args_list -> expression','args_list',1,'p_args_list_2','parser.py',668),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',672),
]
